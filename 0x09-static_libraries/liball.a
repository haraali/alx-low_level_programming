!<arch>
0-isupper.c/    0           0     0     644     235       `
#include "main.h"

/**
 * _isupper - checks for uppercase characters
 * @c: c is uppercase
 * Return: returns 1 if c is uppercase. Else returns 0
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     319       `
#include "main.h"

/**
 * _memset - fills the first n bytes
 * @b: the desired value
 * @n: number of bytes to be changed
 * @s: starting to be filled
 * Return: a pointer to the memory area s
 */
char *_memset(char *s, char b, unsigned int n)
{
	int i = 0;

	for (; n > 0; i++)
	{
		s[i] = b;
		n--;
	}
	return (s);
}

0-strcat.c/     0           0     0     644     333       `
#include "main.h"

/**
 * _strcat - concatenates two strings
 * @dest: input value
 * @src: input value
 * Return: void
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     310       `
#include "main.h"

/**
 * _atoi - converts strings to integer
 * @s: onput value
 * Return: integer
 */
int _atoi(char *s)
{
	int sign = 1;
	int j = 0;
	unsigned int res = 0;

	while (!(s[j] <= '9' && s[j] >= '0' && s[j] != '\0'))
	{
		if (s[j] == '-')
			sign *= -1;
		j++;
	}
	res *= sign;
	return (res);
}

1-isdigit.c/    0           0     0     644     227       `
#include "main.h"

/**
 * _isdigit - function that checks for digit
 * @c: is a digit
 * Return: returns 1 if c is a digit. Else 0 if not
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}

1-memcpy.c/     0           0     0     644     348       `
#include "main.h"

/**
 * _memcpy -  function that copies memory area
 * @n: number of bytes
 * @dest: memory where it is stored
 * @src: memory where it is copied
 * Return: a pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int i = 0;
	int j = n;

	for (; i < j; i++)
	{
		dest[i] = src[i];
		n--;
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     410       `
#include "main.h"

/**
 * _strncat - concatenates two strings
 * it will use at most n bytes from src
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int j;

	i = 0;
	while (dest[i] != '\0')
	{
		i++;
	}
	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}
2-strchr.c/     0           0     0     644     269       `
#include "main.h"

/**
 * _strchr - a function that locates a character in a string
 * @c: input value
 * @s: input value
 * Return: 0
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     223       `
#include "main.h"

/**
 * _strlen -  a function that returns the length of a string
 * @s: string
 * Return: length
 */
int _strlen(char *s)
{
	int longi = 0;

	while (*s != '\0')
	{
		longi++;
		s++;
	}
	return (longi);
}

2-strncpy.c/    0           0     0     644     329       `
#include "main.h"

/**
 * _strncpy - copies a string
 * @dest: input value
 * @src: input value
 * @n: input value
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}
	return (dest);
}

3-islower.c/    0           0     0     644     261       `
#include "main.h"

/**
 * _islower - show 1 if input is a lowercase character. Other cases show 0
 * @c: the character
 * Return: 1 for lowercase character. 0 for the rest
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}

3-puts.c/       0           0     0     644     221       `
#include "main.h"

/**
 * _puts - a function that prints a string, followed by a new line, to stdout
 * @str: string to print
 */
void _puts(char *str)
{
	while (*str != '\0')
	{
		_putchar(*str++);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     305       `
#include "main.h"

/**
 * _strcmp - compares strings values
 * @s1: input value
 * @s2: input value
 * Return: s1[i] - s2[i]
 */
int _strcmp(char *s1, char *s2)
{
	int i;

	i = 0;
	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
	return (0);
}

3-strspn.c/     0           0     0     644     409       `
#include "main.h"

/**
 * _strspn - a function that gets the length of a prefix substring
 * @s: input value
 * @accept: input value
 * Return: 0
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int i = 0;
	int j;

	while (*s)
	{
		for (j = 0; accept[j]; j++)
		{
			if (*s == accept[j])
			{
				i++;
				break;
			}
			else if (accept[j + 1] == '\0')
				return (i);
		}
		s++;
	}
	return (i);
}

4-isalpha.c/    0           0     0     644     264       `
#include "main.h"

/**
 * _isalpha - checks for alphabetic characters
 * @c: the character
 * Return: return 1 if it is a letter. return 0 if not
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
		return (1);
	else
		return (0);
}

4-strpbrk.c/    0           0     0     644     327       `
#include "main.h"

/**
 * _strpbrk - a function that searches a string for any of a set of bytes
 * @s: input value
 * @accept: input value
 * Return: 0
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}
	return ('\0');
}

5-strstr.c/     0           0     0     644     384       `
#include "main.h"

/**
 * _strstr -  function that locates a substring
 * @needle: input value
 * @haystack: input value
 * Return: 0
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *m = haystack;
		char *n = needle;

		while (*m == *n && *n != '\0')
		{
			m++;
			n++;
		}
		if (*n == '\0')
			return (haystack);
	}
	return (0);
}
6-abs.c/        0           0     0     644     214       `
#include "main.h"

/**
 * _abs - computes the absolute value of an integer
 * @t: the integer that will be computed
 * Return: absolute value
 */
int _abs(int t)
{
	if (t >= 0)
		return (t);
	else
		return (-t);
}
9-strcpy.c/     0           0     0     644     339       `
#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
	int l = 0;
	int x = 0;

	while (*(src + l) != '\0')
	{
		l++;
	}
	for (; x < l; x++)
	{
		dest[x] = src[x];
	}
	dest[l] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

